<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://linuxclash.github.io/news/article-44070.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo</title>
        <meta name="description" content="Docker-Compose 是一个可以对 Docker 容器集群的快速编排的工具，能够减轻您心智和手指的负担。 简单的来说 Docker-Compose 就是将你运行多个容器的命令编写到了一起，类似" />
        <link rel="icon" href="/assets/website/img/linuxclash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="LinuxClash免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://linuxclash.github.io/news/article-44070.htm" />
    <meta property="og:site_name" content="LinuxClash免费节点官网" />
    <meta property="og:title" content="Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo" />
    <meta property="og:image" content="https://linuxclash.github.io/uploads/20240811/6905674eac5bfdda644661f849a218c3.webp" />
        <meta property="og:release_date" content="2025-01-21T09:50:35" />
    <meta property="og:updated_time" content="2025-01-21T09:50:35" />
        <meta property="og:description" content="Docker-Compose 是一个可以对 Docker 容器集群的快速编排的工具，能够减轻您心智和手指的负担。 简单的来说 Docker-Compose 就是将你运行多个容器的命令编写到了一起，类似" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/bootstrap.min.css">
    <!-- animate CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/animate.css">
    <!-- owl carousel CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/owl.carousel.min.css">
    <!-- themify CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/themify-icons.css">
    <!-- flaticon CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/flaticon.css">
    <!-- font awesome CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/magnific-popup.css">
    <!-- swiper CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/slick.css">
    <!-- style CSS -->
    <link rel="stylesheet" href="/assets/website/css/linuxclash/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-5LVDH0E2G1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-5LVDH0E2G1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--::header part start::-->
    <header class="main_menu ">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-8 col-xl-8">
                    <nav class="navbar navbar-expand-lg navbar-light">
                        <a class="navbar-brand" href="/">
                                                <span>LinuxClash</span>
                                                </a>

                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse main-menu-item justify-content-end" id="navbarSupportedContent">
                            <ul class="navbar-nav">
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/">首页</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/client.htm">客户端</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/news/">新闻资讯</a>
                                </li>
                                                            </ul>
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </header>
    <!-- Header part end-->
    <!--::breadcrumb part start::-->
    <section class="breadcrumb breadcrumb_bg">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb_iner">
                        <div class="breadcrumb_iner_item">
                            <h2>Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo</h2>
                            <p><a href="/">首页</a> <span>-</span> <a href="/news/">新闻资讯</a> <span>-</span> 正文</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!--::breadcrumb part start::-->
    <!-- about part start-->
    <section class="about_part">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>Docker-Compose 是一个可以对 Docker 容器集群的快速编排的工具，能够减轻您心智和手指的负担。</p> <p>简单的来说 Docker-Compose 就是将你运行多个容器的命令编写到了一起，类似于你会为一系列重复操作写一个 doSomething.sh 文件，只不过 Docker-Compose 提供了更简便的语法。</p> <p>当然如果想管理多主机多容器还是推荐使用 k8s。</p> <p>我们的 demo 是一个基于 node.js 的网站服务，当用户访问当前服务器的根目录时，将 redis 中的浏览量计数增加1。</p> <p>先不看具体的业务代码，这其实无关紧要。假设我们已经写好了 node 服务，那么我们下一步就是写一个<code>Dockerfile</code>文件去构建镜像，然后执行<code>docker run</code> 命令，这样整个服务就启动了。</p> <pre><code class="language-dockerfile">FROM node:18-alpine  WORKDIR '/app'  COPY package.json . RUN npm install COPY . . CMD ["npm","start"]</code></pre> <p>这个<code>Dockerfile</code> 做的事情就是</p> <ul> <li>在容器中创建一个 app 目录，并切换到该目录。</li> <li>将宿主机当前目录下的 package.json 文件拷贝到容器中的当前目录(/app)下</li> <li>执行命令<code>npm install</code></li> <li>将宿主机当前目录下的所有文件拷贝到容器中(因为主体程序index.js还没有拷贝到容器中)</li> <li>运行命令<code>npm start</code>启动服务</li> </ul> <p>因为我们的 node 服务用到了 redis，所以我们还需要启动一个 redis 容器。</p> <p>但 docker 的机制使得这两个容器是互相隔离的，所以想要通信的话</p> <ul> <li>将 redis 端口与宿主机端口做映射，通过宿主机的端口访问 redis</li> <li>创建 docker network，将两个容器放在同一个 docker network下</li> <li>编写 docker-compose.yml 文件，让Docker-Compose帮我们创建 docker network 搞定一切</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/237e3c67902add9c2cccbb4034d59d54.jpg" alt="Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo"></p> <p><code>docker-compose.yml</code></p> <pre><code class="language-yaml">version: '3' services:   ## 容器名   redis-server:     ## 指定镜像    image: 'redis:6.0.16-alpine'    ## 容器重启策略    restart: 'always'   ## 容器名   node-app:    ## 当前目录执行 docker build    build: .    ## 端口映射    ports:       - "8888:8081"</code></pre> <p>虽然我们在文件中没有写任何有关 network 的代码，但 Docker-Compose会自动帮我们创建一个network</p> <p>运行命令</p> <pre><code class="language-shell">sudo docker-compose up --build ## 会执行yaml文件中的build命令</code></pre> <p>访问 localhost:8888 你应该能看到类似这样的界面</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/46ce7fb120ee188748fe0521b1515e5e.jpg" alt="Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo"></p> <p>docker-compose 的命令跟 docker类似</p> <pre><code class="language-shell">docker-compose up -d ## 后台运行 docker-compose down ## 停止</code></pre> <p>最后是文件目录结构和 index.js 以及 package.json的具体代码</p> <pre><code class="language-shell">. ├── docker-compose.yml ├── Dockerfile ├── index.js ├── package.json</code></pre> <p><code>package.json</code></p> <pre><code class="language-json">{     "dependencies": {         "express": "^4.17.3",         "redis": "^4.0.6"     },     "scripts": {         "start": "node index.js"     } }</code></pre> <p><code>index.js</code></p> <pre><code class="language-javascript">const express = require('express');  const redis = require('redis');  const app = express();  const client = redis.createClient({   url : 'redis://redis-server:6379' // redis-server会被docker解析并转发 });  const db = {   async set(key,value){     return fun(async()=&gt;{       return await client.set(key,value)     },key,value)   },   async get(key){     return fun(async()=&gt;{       return await client.get(key)     },key)   } }  async function fun(callback,key,value){   return new Promise(async (res,rej)=&gt;{     await client.connect();     let ok = callback(key,value);     await client.quit();     res(ok);   }) }  db.set("visits",0);  async function cntVisits(){   let cnt = await db.get("visits");   await db.set("visits",parseInt(cnt)+1);   return parseInt(cnt)+1; }  app.get('/', (req, res) =&gt; {      cntVisits().then( result =&gt; {         res.send('Number of visits is ' + result);      }); }); // 8081是容器内部的端口，我们需要访问的是8888,因为在docker-compose.yml文件中已经做过端口映射了 app.listen(8081, () =&gt; { console.log('Listening on port 8081'); });</code></pre> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-44069.htm">使用Nginx实现多个Tomcat负载均衡</a></p>
                                        <p>下一个：<a href="/news/article-44549.htm">win11系统没有应用商店如何解决</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-4-free-subscribe-node.htm" title="「3月4日」最高速度19.9M/S，2025年Clash/SSR/Shadowrocket/V2ray免费机场订阅链接地址，翻墙机场推荐">「3月4日」最高速度19.9M/S，2025年Clash/SSR/Shadowrocket/V2ray免费机场订阅链接地址，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-60462.htm" title="Docker基础DockerFile文件详解">Docker基础DockerFile文件详解</a></li>
                        <li class="py-2"><a href="/news/article-49013.htm" title="SpringCloud Feign整合Sentinel">SpringCloud Feign整合Sentinel</a></li>
                        <li class="py-2"><a href="/news/article-45533.htm" title="Vue结合ElementUI上传Base64编码后的图片实例_vue.js">Vue结合ElementUI上传Base64编码后的图片实例_vue.js</a></li>
                        <li class="py-2"><a href="/news/article-50533.htm" title="Vue项目中使用Mockjs造假数据">Vue项目中使用Mockjs造假数据</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-4-free-node-subscribe.htm" title="「2月4日」最高速度20M/S，2025年V2ray/Clash/Shadowrocket/SSR免费机场订阅链接地址，翻墙机场推荐">「2月4日」最高速度20M/S，2025年V2ray/Clash/Shadowrocket/SSR免费机场订阅链接地址，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-1-free-node-subscribe-links.htm" title="「2月1日」最高速度19.9M/S，2025年Shadowrocket/V2ray/SSR/Clash免费机场订阅链接地址，翻墙机场推荐">「2月1日」最高速度19.9M/S，2025年Shadowrocket/V2ray/SSR/Clash免费机场订阅链接地址，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-50532.htm" title="前端面试题：手写用js的函数 实现和instanceof 一样的功能">前端面试题：手写用js的函数 实现和instanceof 一样的功能</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-30-node-share-links.htm" title="「1月30日」最高速度18.1M/S，2025年Shadowrocket/V2ray/SSR/Clash免费机场订阅链接地址，翻墙机场推荐">「1月30日」最高速度18.1M/S，2025年Shadowrocket/V2ray/SSR/Clash免费机场订阅链接地址，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-46517.htm" title="宠物粮行业分析报告范文（宠物粮食市场前景）">宠物粮行业分析报告范文（宠物粮食市场前景）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <!-- about part start-->
    <footer class="copyright_part">
        <div class="container">
            <div class="row align-items-center">
                <p class="footer-text m-0 col-lg-8 col-md-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    LinuxClash免费节点官网 版权所有 Powered by WordPress
                </p>
                <div class="col-lg-4 col-md-12 text-center text-lg-right footer-social">
                    <a href="#"><i class="ti-facebook"></i></a>
                    <a href="#"> <i class="ti-twitter"></i> </a>
                    <a href="#"><i class="ti-instagram"></i></a>
                    <a href="#"><i class="ti-skype"></i></a>
                </div>
            </div>
        </div>
    </footer>
    <!-- footer part end-->
    <!-- jquery plugins here-->
    <!-- jquery -->
    <script src="/assets/website/js/frontend/linuxclash/jquery-1.12.1.min.js"></script>
    <!-- popper js -->
    <script src="/assets/website/js/frontend/linuxclash/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/linuxclash/bootstrap.min.js"></script>
    <!-- easing js -->
    <script src="/assets/website/js/frontend/linuxclash/jquery.magnific-popup.js"></script>
    <!-- swiper js -->
    <script src="/assets/website/js/frontend/linuxclash/swiper.min.js"></script>
    <!-- swiper js -->
    <script src="/assets/website/js/frontend/linuxclash/masonry.pkgd.js"></script>
    <!-- particles js -->
    <script src="/assets/website/js/frontend/linuxclash/owl.carousel.min.js"></script>
    <!-- swiper js -->
    <script src="/assets/website/js/frontend/linuxclash/slick.min.js"></script>
    <!-- custom js -->
    <script src="/assets/website/js/frontend/linuxclash/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>